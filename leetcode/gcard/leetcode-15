class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        int n = nums.size();
        sort(nums.begin(), nums.end());
        vector<vector<int>> ans;
        for(int i = 0; i < n; i++) {
            if (i == 0 || nums[i] != nums[i - 1]) {
                find_triplets(i, nums, ans);        
            }
        }
        return ans;      
    }
    void find_triplets(int start, vector<int> &nums, vector<vector<int>> &ans) {
        int low = start + 1;
        int high = nums.size() - 1;
        while(low < high) {
            int sum = nums[start] + nums[low] + nums[high];
            if (sum < 0) {
                low++;
            } else if (sum > 0) {
                high--;
            } else {
                ans.push_back({nums[start], nums[low++], nums[high--]});
                while(low <= high && nums[low] == nums[low - 1]) {
                    low++;
                }
            }
        }
    }
};