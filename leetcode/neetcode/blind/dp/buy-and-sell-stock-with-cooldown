class Solution {
public:
    int maxProfit(vector<int>& prices) {
  		int n = prices.size();
  		vector<vector<int>> dp(n, vector<int>(2, 0)); // 0 buy 1 sell
  		auto getCache = [&](int i, int j) -> int {
  			return i >= 0 ? dp[i][j] : 0;
  		};
        dp[0][0] = -prices[0];
        dp[0][1] = 0;
  		for(int i = 1; i < n; i++) {
  			dp[i][0] = max(-prices[i] + getCache(i - 2, 1), getCache(i - 1, 0));
  			dp[i][1] = max(prices[i] + getCache(i - 1, 0), getCache(i - 1, 1));
  		}
  		return dp[n - 1][1];      
    }
};
